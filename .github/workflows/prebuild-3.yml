name: Prebuild Dev Container (3)

on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  BASE_IMAGE_NAME: ${{github.repository_owner}}/hugo-blog-3
  REGISTRY: ghcr.io
jobs:
  build-images:
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        include:
          - runner-label: ubuntu-24.04
            platform: amd64
          - runner-label: ubuntu-24.04-arm
            platform: arm64
    runs-on: ${{ matrix.runner-label }}
    permissions:
      packages: write
      contents: read
    env:
      PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        run: |
          sudo npm install -g npm@latest
          sudo npm install -g @devcontainers/cli

          export HUGO_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/hugo:1"].version')
          echo HUGO_VERSION=${HUGO_VERSION} >> $GITHUB_ENV

          echo "Hugo Version: ${HUGO_VERSION}"

          devcontainer build \
            --workspace-folder . \
            --push false \
            --output type=oci,dest=$RUNNER_TEMP/oci-${PLATFORM}.tar.gz \
            --label "org.opencontainers.image.source=${GITHUB_REPOSITORY_URL}" \
            --config .devcontainer/build/devcontainer.json \
            --image-name "${REGISTRY}/${BASE_IMAGE_NAME}-${PLATFORM}:${HUGO_VERSION}" \
            --platform "linux/${PLATFORM}"
      
      - name: Upload image
        run: |
          
          skopeo copy --all --preserve-digests oci-archive:$RUNNER_TEMP/oci-${PLATFORM}.tar.gz docker://${REGISTRY}/${BASE_IMAGE_NAME}@@unknown-digest@@ 
          
          mkdir -p ${{ runner.temp }}/digests
          digest=$(skopeo inspect --format '{{.Digest}}' oci-archive:$RUNNER_TEMP/oci-${PLATFORM}.tar.gz)
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{matrix.platform}}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1    
          
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: oci-${{ matrix.platorm }}
#          path: ${{runner.temp}}/oci-${{matrix-platform}}.tar.gz
        
  merge-images:
    needs: build-images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      # id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
     
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Show meta
        run: |
            echo $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
            echo "***"
            echo -E "$DOCKER_METADATA_OUTPUT_JSON"

      - name: Merge images
        working-directory: ${{ runner.temp}}/digests
        run: |
          # --sbom=true --attest type=provenance,mode=max \
          export HUGO_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/hugo:1"].version')
          export PWSH_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/powershell:1"].version')
          export NODE_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/node:1"].version')
          export DIGESTS=$(printf '${REGISTRY}/${BASE_IMAGE_NAME}@sha256:%s ' *)

          echo "Digests: ${DIGESTS}"

          docker buildx imagetools create \
            -t "${REGISTRY}/${BASE_IMAGE_NAME}:${HUGO_VERSION}" \
            -t "${REGISTRY}/${BASE_IMAGE_NAME}:latest" \
            --annotation "index:org.opencontainers.image.created=$(date --rfc-3339=seconds --utc)" \
            --annotation "index:org.opencontainers.image.source=${GITHUB_REPOSITORY_URL}"\
            --annotation "index:org.opencontainers.image.version=${HUGO_VERSION}" \
            --annotation "index:org.opencontainers.image.ref.name=${GITHUB_REF}" \
            --annotation "index:org.opencontainers.image.name=Hugo ${HUGO_VERSION} Dev Container" \
            --annotation "index:org.opencontainers.image.description=Hugo ${HUGO_VERSION}; PowerShell ${PWSHL_VERSION}; Node: ${NODE_VERSION}" \
            --annotation "index:org.opencontainers.image.revision=${{ github.event.pull_request.head.sha }}" \
            $DIGESTS
          echo "************ INSPECTING IMAGE ************"
          docker buildx imagetools inspect "${REGISTRY}/${BASE_IMAGE_NAME}:${HUGO_VERSION}"
