name: Prebuild Dev Container (3)

on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  BASE_IMAGE_NAME: ${{github.repository_owner}}/hugo-devcontainer
  REGISTRY: ghcr.io

jobs:
  build-images:
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        include:
          - runner-label: ubuntu-24.04
            platform: amd64
          - runner-label: ubuntu-24.04-arm
            platform: arm64
    runs-on: ${{ matrix.runner-label }}
    permissions:
      packages: write
      contents: read
    env:
      PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node v22
        uses: actions/setup-node@v4
        with:
          node-version: '22.16'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Gather versions
        run: |
          export HUGO_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/hugo:1"].version')
          export PWSH_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/powershell:1"].version')
          export NODE_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/node:1"].version')
          
          echo "HUGO_VERSION=${HUGO_VERSION}" >> $GITHUB_ENV
          echo "PWSH_VERSION=${PWSH_VERSION}" >> $GITHUB_ENV
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.description=Hugo ${{env.HUGO_VERSION}}; PowerShell ${{env.PWSH_VERSION}}; Node: ${{env.NODE_VERSION}}

      - name: Build
        run: |
          sudo npm install -g npm@latest
          sudo npm install -g @devcontainers/cli

          echo "Hugo Version: ${HUGO_VERSION}"
          LABELS=($(jq -cr '.labels | to_entries|map("--label \"" + .key + "=" + .value + "\"") | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON"))

          echo "Labels: ${LABELS[@]}"

          devcontainer build \
            --workspace-folder . \
            --push false \
            --output type=oci,dest=$RUNNER_TEMP/oci-${PLATFORM}.tar.gz \
            --config .devcontainer/build/devcontainer.json \
            --image-name "${REGISTRY}/${BASE_IMAGE_NAME}-${PLATFORM}:${HUGO_VERSION}" \
            --platform "linux/${PLATFORM}" \
            "${LABELS[@]}"
      
      - name: Upload image
        run: |
          
          skopeo copy --all --preserve-digests oci-archive:$RUNNER_TEMP/oci-${PLATFORM}.tar.gz docker://${REGISTRY}/${BASE_IMAGE_NAME}@@unknown-digest@@ 
          
          mkdir -p ${{ runner.temp }}/digests
          digest=$(skopeo inspect --format '{{.Digest}}' oci-archive:$RUNNER_TEMP/oci-${PLATFORM}.tar.gz)
          echo "Digest: ${digest#sha256:}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{matrix.platform}}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1    
          
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: oci-${{ matrix.platorm }}
#          path: ${{runner.temp}}/oci-${{matrix-platform}}.tar.gz
        
  merge-images:
    needs: build-images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      actions: write # To cleanup artifacts
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
     
      - name: Gather versions
        run: |
          export HUGO_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/hugo:1"].version')
          export PWSH_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/powershell:1"].version')
          export NODE_VERSION=$(sed -e 's/\/\/.*//' -e 's/\/\*.*\*\///' .devcontainer/build/devcontainer.json | jq -r '.features["ghcr.io/devcontainers/features/node:1"].version')
          
          cd ${{ runner.temp}}/digests
          export DIGESTS=$(printf "${REGISTRY}/${BASE_IMAGE_NAME}@sha256:%s " *)

          echo "Digests: ${DIGESTS}"
          echo "HUGO_VERSION=${HUGO_VERSION}" >> $GITHUB_ENV
          echo "PWSH_VERSION=${PWSH_VERSION}" >> $GITHUB_ENV
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV
          echo "DIGESTS=${DIGESTS}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          annotations: |
            org.opencontainers.image.description=Hugo ${{env.HUGO_VERSION}}; PowerShell ${{env.PWSH_VERSION}}; Node: ${{env.NODE_VERSION}}
            
      - name: Show meta
        run: |
            echo $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
            echo "***"
            echo -E "$DOCKER_METADATA_OUTPUT_JSON"

      - name: Merge images
        id: merge-images
        run: |
          # --sbom=true --attest type=provenance,mode=max \
          ANNOTATIONS=($(jq -cr '.annotations | map("--annotation \"" + . + "\"") | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON"))
          TAGS=($(jq -cr '.annotations | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON"))

          echo "docker buildx imagetools create ${TAGS[@]} ${ANNOTATIONS[@]} ${DIGESTS[@]}"

          docker buildx imagetools create "${TAGS[@]}" "${ANNOTATIONS[@]}" "${DIGESTS[@]}"

          echo "************ INSPECTING IMAGE ************"
          docker buildx imagetools inspect "${REGISTRY}/${BASE_IMAGE_NAME}:${HUGO_VERSION}"

          digest=$(skopeo inspect --format '{{.Digest}}' "docker://${REGISTRY}/${BASE_IMAGE_NAME}")

      - name: Attest
        uses: actions/attest-build-provenance@v2
        id: attest
        if: false
        with:
          subject-name: ${{env.REGISTRY}}/${{env.BASE_IMAGE_NAME}}
          subject-digest: ${{ steps.merge-images.outputs.digest }}
          push-to-registry: true

      - name: Clean up digests
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACTS=$(gh api "/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts" --jq '.artifacts[].id')
          while IFS= read -r ARTIFACT_ID; do 
            gh api --method DELETE "repos/${GITHUB_REPOSITORY}/actions/artifacts/${ARTIFACT_ID}"
          done <<< $ARTIFACTS

